- name: Ensure a DigitalOcean droplet exists
  hosts: localhost
  gather_facts: no
  vars:
    droplet_name: "docker-compose-demos"
    region: "nyc1"
    size: "s-2vcpu-4gb"
    image: "ubuntu-20-04-x64"
    ssh_key_fingerprint: "{{ lookup('env','MACHINE_KEY_DO_FINGERPRINT') }}"
    domain: "nvtest.io"
    dns_records:
      - "javaspringvulny"
      - "vulndjangoplay"

  tasks:
    - name: Ensure droplet exists
      community.digitalocean.digital_ocean_droplet:
        state: present
        oauth_token: "{{ lookup('env','DO_API_TOKEN') }}"
        name: "{{ droplet_name }}"
        region: "{{ region }}"
        size: "{{ size }}"
        image: "{{ image }}"
        unique_name: yes
        ssh_keys:
          - "{{ ssh_key_fingerprint }}"
      register: droplet

    # - debug:
    #     msg: "{{ droplet.data.droplet.networks.v4 }}"

    - name: Register Droplet IP
      set_fact:
        droplet_ip: "{{ droplet.data.droplet.networks.v4[1].ip_address }}"
      when: droplet.data.droplet.networks.v4[1].ip_address is defined

    - debug:
        msg: "{{ droplet_ip }}"

    - name: Add droplet to host group for configuration
      add_host:
        hostname: "{{ droplet_ip }}"
        groupname: "configured_droplets"
        ansible_ssh_private_key_file: "~/.ssh/machine"
        ansible_user: "root"

    # - name: Update DNS A records
    #   community.digitalocean.digital_ocean_domain_record:
    #     state: present
    #     oauth_token: "{{ lookup('env','DO_API_TOKEN') }}"
    #     domain: "{{ domain }}"
    #     type: A
    #     name: "{{ item }}"
    #     value: "{{ droplet_ip }}"
    #     ttl: 3600
    #   loop: "{{ dns_records }}"

- name: Install and configure Docker, Docker Compose, and Git
  hosts: configured_droplets
  become: true
  vars:
    git_repos:
      - repo: "https://github.com/vulnerable-apps/vuln_django_play.git"
        dest: "/root/vuln_django_play"
      - repo: "https://github.com/vulnerable-apps/javaspringvulny.git"
        dest: "/root/javaspringvulny"
        # Add more repositories here as needed

  tasks:
    - name: Install Docker, Docker Compose, and Git
      apt:
        name:
          - docker.io
          - docker-compose
          - git
        state: present
        update_cache: yes

    - name: Clone repositories
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        clone: yes
        update: no
      loop: "{{ git_repos }}"

    - name: Run docker compose up in each repository
      shell: docker-compose up -d
      args:
        chdir: "{{ item.dest }}"
      loop: "{{ git_repos }}"