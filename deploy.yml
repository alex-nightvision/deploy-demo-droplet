- name: Ensure a DigitalOcean droplet exists
  hosts: localhost
  gather_facts: no
  vars:
    droplet_name: "docker-compose-demos3"
    region: "nyc1"
    size: "s-2vcpu-4gb"
    image: "ubuntu-20-04-x64"
    ssh_key_fingerprint: "{{ lookup('env','MACHINE_KEY_DO_FINGERPRINT') }}"
    oauth_token: "{{ lookup('env','DO_API_TOKEN') }}"
    domain: "nvtest.io"
    dns_records:
      - "javaspringvulny"
      - "vulndjangoplay"

  tasks:
    - name: Ensure droplet exists
      community.digitalocean.digital_ocean_droplet:
        state: present
        oauth_token: "{{ oauth_token }}"
        name: "{{ droplet_name }}"
        region: "{{ region }}"
        size: "{{ size }}"
        image: "{{ image }}"
        unique_name: yes
        ssh_keys:
          - "{{ ssh_key_fingerprint }}"
      register: droplet

    # - debug:
    #     msg: "{{ droplet.data.droplet.networks.v4 }}"

    - name: Register Droplet IP
      set_fact:
        droplet_ip: "{{ droplet.data.droplet.networks.v4[1].ip_address }}"
      when: droplet.data.droplet.networks.v4[1].ip_address is defined

    - debug:
        msg: "{{ droplet_ip }}"

    - name: Write output to a file
      copy:
        content: "{{ droplet_ip }}"
        dest: "./ip_address"

    - name: Add droplet to host group for configuration
      add_host:
        hostname: "{{ droplet_ip }}"
        groupname: "configured_droplets"
        ansible_ssh_private_key_file: "~/.ssh/machine"
        ansible_user: "root"

    # - name: Update DNS A records
    #   community.digitalocean.digital_ocean_domain_record:
    #     state: present
    #     oauth_token: "{{ oauth_token }}"
    #     domain: "{{ domain }}"
    #     type: A
    #     name: "{{ item }}"
    #     value: "{{ droplet_ip }}"
    #     ttl: 3600
    #   loop: "{{ dns_records }}"

- name: Install and configure Docker, Docker Compose, and Git
  hosts: configured_droplets
  become: true
  vars:
    git_repos:
      # http://vulndjangoplay.nvtest.io:8020
      - repo: "https://github.com/vulnerable-apps/vuln_django_play.git"
        dest: "/root/vuln_django_play"
      # https://javaspringvulny.nvtest.io:9000
      # https://javaspringvulny.nvtest.io
      # also using postgres on port 5432
      - repo: "https://github.com/vulnerable-apps/javaspringvulny.git"
        dest: "/root/javaspringvulny"
      # http://railsgoat.nvtest.io:3000/
      # http://161.35.6.115:3000
      - repo: "https://github.com/OWASP/railsgoat.git"
        dest: "/root/railsgoat"
      # http://goatdotnet.nvtest.io:8999
      - repo: "https://github.com/alex-nightvision/owasp-webgoat-dot-net-docker.git"
        dest: "/root/owasp-webgoat-dot-net-docker"
      # http://xssfastapi.nvtest.io:8000
      - repo: "https://github.com/alex-nightvision/xss-fastapi.git"
        dest: "/root/xss-fastapi"
      # # port: http://localhost:9092
      # - repo: "https://github.com/wurstmeister/kafka-docker.git"
      #   dest: "/root/kafka-docker"
      # http://nginxui.nvtest.io:8080/
      - repo: "https://github.com/schenkd/nginx-ui.git"
        dest: "/root/nginx-ui"
      # http://vulnlab.nvtest.io:1337/
      - repo: "https://github.com/alex-nightvision/VulnLab.git"
        dest: "/root/VulnLab"
    docker_deploy:
      - "docker run --name dvna -p 9090:9090 -d appsecco/dvna:sqlite"

  tasks:
    - name: Install Docker, Docker Compose, and Git
      apt:
        name:
          - docker.io
          - docker-compose
          - git
        state: present
        update_cache: yes

    - name: Clone repositories
      git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        clone: yes
        update: no
      loop: "{{ git_repos }}"

    - name: Run docker compose up in each repository
      shell: docker-compose up -d
      args:
        chdir: "{{ item.dest }}"
      loop: "{{ git_repos }}"

    - name: Run docker deploy
      shell: "{{ item }}"
      loop: "{{ docker_deploy }}"

    # Add tasks to copy and execute shell script
    - name: Copy refresh-apps.sh script
      copy:
        src: ./refresh-apps.sh
        dest: /root/refresh-apps.sh
        mode: "u+x"  # Make the script executable

    - name: Schedule the script to run once per day
      cron:
        name: "Run refresh-apps.sh daily"
        minute: "0"
        hour: "0"
        job: "/root/refresh-apps.sh"